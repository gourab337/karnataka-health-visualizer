# -*- coding: utf-8 -*-
"""Karnataka_Health (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VuJR-BCYklaOeJZXKAVmTR6ufH6KClH_
"""

#!pip install geopandas

#!pip install pyshp

import geopandas as gpd
import pandas as pd
import numpy as np

#!git clone https://github.com/vik4114/map.git

import shapefile
df1 = gpd.read_file('map/District_Boundary.shp')

r = shapefile.Reader("map/District_Boundary.shp")
df1.head()
points = df1.copy()
points.geometry = points['geometry'].centroid
# same crs
points.crs =df1.crs
# print(points['geometry'][0])

df1

x=[]
y=[]
for i in points['geometry']:
  x.append(i.x)
  y.append(i.y)
# print(y)

#to be deleted
print(x)
print(y)

df1.plot(figsize = (8,8))

df1 = df1.rename(columns={'KGISDist_1': 'District'})

import pandas as pd
zones = pd.read_csv ("/home/gourab337/Desktop/karnataka-health-visualizer/dataset.csv")

# zones = pd.read_csv('drive/MyDrive/31.csv')

print(zones)

lis=[]
i=0
while(i<zones.shape[0]):
  if int(zones['%HWC'][i])>=50 and int(zones['%HWC'][i])<60 :
    lis.append('Green1')
  elif int(zones['%HWC'][i])>=60 and int(zones['%HWC'][i])<70 :
    lis.append('Green2')
  elif int(zones['%HWC'][i])>=70 and int(zones['%HWC'][i])<80 :
    lis.append('Green3')
  elif int(zones['%HWC'][i])>=80 and int(zones['%HWC'][i])<90 :
    lis.append('Green4')
  elif int(zones['%HWC'][i])>=90 and int(zones['%HWC'][i])<=100 :
    lis.append('Green5')
  elif int(zones['%HWC'][i])>=40 and int(zones['%HWC'][i])<50:
    lis.append('Red1')
  elif int(zones['%HWC'][i])>=30 and int(zones['%HWC'][i])<40:
    lis.append('Red2')
  elif int(zones['%HWC'][i])>=20 and int(zones['%HWC'][i])<30:
    lis.append('Red3')
  elif int(zones['%HWC'][i])>=10 and int(zones['%HWC'][i])<20:
    lis.append('Red4')
  elif int(zones['%HWC'][i])>=0 and int(zones['%HWC'][i])<10:
    lis.append('Red5')
  else:
    lis.append('Gray')
  i+=1

zones['Zone']=lis

print(zones)

zones.info()

newdf = df1.merge(zones, on = ['District'])
newdf = newdf.drop(columns = ['created_us', 'last_edite', 'last_edi_1','created_da'])
#print(newdf)
print(newdf.shape)

districtList=[]
hwcsList=[]
loginList=[]
thwcList=[]
topdList = []
ahwcList = []
aopdList = []



i=0
while(i<zones.shape[0]):
  districtList.append(zones['District'][i])
  hwcsList.append("HWCs: "+str(zones['HWCs'][i]))
  loginList.append("Login: "+str(zones['Login'][i]))
  thwcList.append("T-HWC: "+str(zones['T- HWC'][i]))
  topdList.append("T-OPD: "+str(zones['T- OPD'][i]))
  ahwcList.append("A-HWC: "+str(zones['A-HWC'][i]))
  aopdList.append("A-OPD: "+str(zones['A-OPD'][i]))
  i+=1
  # lis.append(newdf['District'][i]+" : "+newdf['Range'][i])

#print(districtList)

import json
from bokeh.io import show
from bokeh.io import output_file, save
from bokeh.models import ColumnDataSource, Grid, LinearAxis, Plot, Text, LabelSet
from bokeh.models import (CDSView, ColorBar, ColumnDataSource,
                          CustomJS, CustomJSFilter, 
                          GeoJSONDataSource, HoverTool,
                          CategoricalColorMapper, LinearColorMapper, Slider)
from bokeh.layouts import column, row, widgetbox
from bokeh.io import output_notebook
from bokeh.plotting import figure
from bokeh.palettes import brewer

feature_list = [districtList,hwcsList,loginList,thwcList,topdList,ahwcList,aopdList]
source_list=[]
for i in feature_list:
  source = ColumnDataSource(data=dict(x=x, y=y, names=i))
  source_list.append(source)
src = source_list[0]

geosource = GeoJSONDataSource(geojson = newdf.to_json())

# Define color palette
palette = ['Green1','Green2','Green3','Green4','Green5', 'Red1','Red2','Red3','Red4','Red5']
green = list(brewer["Greens"][5])
red = list(brewer["Reds"][5])
green.extend(red)
color_mapper = CategoricalColorMapper(palette = green, factors = palette)

# Create figure object.
q = figure(title = 'Red, Green District of Covid19',
           plot_height = 2000 ,
           plot_width = 1500, 
           toolbar_location = 'right',
           tools = "pan, wheel_zoom, box_zoom, reset")
q.title.text_font_size = '12pt'
q.title.align = 'center'

q.xgrid.grid_line_color = None
q.ygrid.grid_line_color = None
labels = LabelSet(x='x', y='y', text='names', 
              x_offset=-20, y_offset=25, source=src, render_mode='canvas',text_font_size="10pt", text_font_style="bold")
q.add_layout(labels)
y_off = 25
for src in source_list[1:]:
  y_off -= 15
  labels = LabelSet(x='x', y='y', text='names', 
                x_offset=-20, y_offset=y_off, source=src, render_mode='canvas',text_font_size="7pt")
  q.add_layout(labels)

# Add patch renderer to figure.
states = q.patches('xs','ys', source = geosource,
                   fill_color = {'field' :'Zone',
                                 'transform' : color_mapper},
                   line_color = 'black',
                   line_width = 0.25, 
                   fill_alpha = 1)
"""
# Create hover tool
p.add_tools(HoverTool(renderers = [states],
                      tooltips = [('District','@District'),
                                  ('Range','@Range')
                                 ]))
"""
from datetime import datetime
now = datetime.now()

#current_time = now.strftime("%H:%M:%S")
#st='plot'+current_time+'.html'
st='plot.html'
output_file(st, mode='inline')
save(q)
# from google.colab import files
# files.download(st)

